public class MyPDFScraper
    static class CustomTextStripper extends PDFTextStripper // from library
        @Override
        void writeString(String text, List<TextPosition> textPositions)
            for (TextPosition textPosition : textPositions)
                String font = textPosition.getFontName
                float fontSize = textPosition.getFontSize
                String text = textPosition.getUnicode()
                print text, font and fontSize formatted
        super.writeString(text, textPositions)    
    static void extractTextWithFormatting(String pdfPath) throws IOException
        File pdf = new File(pdfPath)
        if (!pdf.exists())
            print(doesn't exist)
            return
        try (PDDocument document = PDDocument.load(pdf))
            CustomPDFStripper pdfStripper = new CustomPDFStripper()
            String text = pdfStripper.getText(document) // extending from PDFScraper library
            String outputFilePath = pdfPath.replace(".pdf", "_formatted.txt")
            try (FileWriter wrtier = new FileWriter(outputFilePath))
                writer.write(text)
            print(formatted and saved to + outputFilePath)
    public static void extractTextFromPDFFolder(String folderPath) throws IOException
        File folder = new File(folderPath)
        if (!folder.isDirecgtory())
            print(Not a directory)
            return
        File[] files = folder.listFiles()
        if (files != null)
            for (File file : files)
                if (file.isFile() && file.getName().endsWith(".pdf"))
                    extractTextWithFormatting(file.absolutePath())
                    extractPDFMetadata(file.absolutePath())
    
public class MyPDFScraper  
    static CustomPDFStripper extends PDFTextStripper // from library
        @Override
        void writeString(String text, List<TextPosition> textPositions)
            String font = textPosition.getFont()
            float fontSize = textPosition.getFontSize()
            print(textPosition.getUnicode, font, and fontSize)
        super.writeString(text, textPositions)
    void extractTextWithFormatting(String pdfPath)
        File pdf = new File(pdfPath)
        if (pdf doesnt exist)
            print(pdf doesnt exist)
            return
        try(PDDocument document = PDDocument.load(pdf))
            CustomPDFStripper pdfStripper = new CustomPDFStripper()
            String text = pdfStripper.getText(document)
            String outputFilePath = pdfPath.replace(".pdf", "_formatted.txt")
            try(FileWriter writer = new FileWriter(outputFilePath))
                writer.write(text)
    void extractTextFromPDFFolder(String folderPath)
        File folder = new File(folderPath)
        if (!folder.isDirectory())
            print(not direcotry)
            return
        File[] files = folder.listFiles()
        if (files != null)
            for (file file in files)
                if(file is file and file ends in .pdf)
                    extractTextWithFormatting(file.filepath)
                    extractPDFMetadata(file.filepath)
    main() // example use case
        String singlePDFPath = path to pdf; // example
        String folderPath = path to pdf folder;
        MyPDFScraper scraper = new MyPDFScraper();
        scraper.extractTextWithFormatting(singlePDFPath);
        scraper.extractTextFromPDFFolder(folderPath);
        initialize firebase
        select firestore instance
        select file to upload
        get instance storage reference
        create upload uploadtask
        reference proper firebase document
        put data into Map
        add Map to database

public class MyPDFScraper
    static class CustomTextScraper extends PDFTextStripper // from library
        @Override
        void writeString(String text, List<TextPosition> textPositions) // basic case
            String font = textPosition.getFont()
            float fontsize = textPosition.getFontSize()
            print(textPositions.getUnicode, font and font size)
        super.writeString(text, textPositions)
    void extractTextWithFormatting(String pdfPath) throws IOException
        File pdf = new File(pdfPath)
        if (!pdf.exists())
            print(doesnt exist)
            return
        try (PDDocument document = PDDocument.open(pdf))
            CustomTextScraper pdfScraper = new CustomPDFStripper(document)
            String text = pdfScraper.getText(document)
            String outputFilePath = pdfPath.replace(".pdf", "_formatted.txt")
            try (FileWriter writer = new FileWriter(outputFilePath))
                writer.write(text)
                print(saved and formatted to output path)
    void extractTextFromPDFFolder(String folderPath)
        File folder = new File(folderPath)
        if (!folder.isDirectory())
            print(not a directory)
            return
        File[] files = folder.listFiles()
        if (files != null)
            for (File file : files)
                if (file.isFile() && file.getName().endsWith(".pdf"))
                    extractTextWithFormatting(file.absolutePath())
                    extractPDFMetadata(file.absolutePath())
    void extractPDFMetadata(String pdfPath)
        load file
        use library to scrape meta data
        create txt file of meta data
    main() // example case
        singlePDFPath = "example pdf path"
        folderPath = "example folder path"
        customtextscraper pdfscraper = new customtextscraper()
        pdfscraper.extractTextwithFormatting(singlePDFPath)
        pdfscraper.extractTextFromPDFFolder(folderPath)
        initialize firestore
        select firestore instance
        select firestore document
        select file to upload
        create upload task
        select storage
        add data to Map
        upload map to firebase

public class MyPDFScraper
    static class CustomTextStripper extends PDFTextStripper // library
        @Override
        void writeString(String text, List<TextPosition> textPositions) // example usage
            String font = textPositions.getFont()
            float fontSize = textPositions.getFontSize()
            print(textPositions.getUnicode() and font and fontsize)
        super.writeString(text, textPositions)
    void extractTextWithFormatting(String pdfPath) throws IOException
        File pdf = new File(pdfPath)
        if (!pdf.exists())
            print(pdf doesnt exist)
            return
        try(PDDocument document = PDDocument.open(pdf))
            CustomTextStripper pdfScraper = new CustomTextStripper()
            String text = pdfScraper.getText(document)
            String outputFilePath = pdfPath.replace(".pdf", "_formatted.txt")
            try(FileWriter writer = new FileWriter(outputFilePath))
                writer.write(text)
                print(saved and formatted to outputPath)
    void extracTextFromPDFFolder(String folderPath) throws IOException
        File folder = new File(folderPath)
        if (!folder.isDirectory())
            print(not a directory)
            return
        File[] files = folder.listFiles()
        if (files != null)
            for (File file : files)
                if (file.isFile() && file.getName().endsWith(".pdf"))
                    extractTextWithFormatting(file.absolutePath())
                    extractPDFMetadata(file.absolutePath())
    void extractPDFMetadata(String pdfPath)
        read pdf file
        use library to scrape metadata
        create txt file of meta data
    main() // example case
        pdfPath = "examplePDFPath"
        folderPath = "exampleFolderPath"
        CustomTextStripper pdfScraper = new CustomTextStripper()
        pdfScraper.extractTextWithFormatting(pdfPath)
        pdfScraper.extractTextWithFormatting(folderPath)
        initialize firebase
        select firebase instance
        select firebase document
        select file to upload
        create upload task
        select/create storage document
        put data into map
        add map to database